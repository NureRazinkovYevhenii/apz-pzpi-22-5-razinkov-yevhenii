Харківський університет радіоелектроніки
Факультет комп'ютерних наук
Кафедра програмної інженерії






ЗВІТ
до практичного заняття з дисципліни
"Архітектура програмного забезпечення" 
на тему: "Архітектура відомих програмних систем" 







Виконав ст. гр. ПЗПІ-22-5 
Разіньков Євгеній Олександрович 
Перевірив 
ст. викладач кафедри ПІ 
Сокорчук Ігор Петрович 


Харків 2024
ІСТОРІЯ ЗМІН

№Дата      Версія звітуОпис змін та виправлень119.04.20250.05Додано титульну сторінку та історію змін219.04.20250.2Створено презентацію320.04.20250.3Створено розділ «Завдання»420.04.20250.7Додано мету, хід роботи та висновки520.04.20251Додано додатки





















ЗАВДАННЯ

У рамках практичного заняття 2 (ПЗ2) необхідно виконати такі завдання:
1. Підготувати доповідь на тему: «Архітектура відомих програмних систем».
2. Створити презентацію доповіді, оформивши слайди відповідно до правил оформлення навчальних матеріалів.
3. Записати відеопрезентацію доповіді та опублікувати її на YouTube.
4. Оформити та завантажити звіт до виконаної роботи на dl.nure.ua.
5. При необхідності створити GitHub-акаунт з обліковим записом у домені @nure.ua.
6. Створити GitHub-репозиторій із вказаною назвою для зберігання матеріалів з дисципліни.
7. Створити та заповнити файл README.md у корені створеного репозиторію, відповідно до вимог завдання.
8. Створити у репозиторії директорію Pract2 для завантаження звіту та вихідного коду.
9. Експортувати звіт у текстовому форматі та завантажити його у директорію Pract2 у GitHub-репозиторії.
10. Завантажити у піддиректорію з кодом увесь програмний код, який розглядається у доповіді ПЗ2.









Мета: Ознайомитися з архітектурою великої програмної системи на прикладі Instagram, розібрати основні архітектурні патерни, які використовуються для забезпечення масштабованості, надійності та продуктивності, а також зрозуміти їхню роль у сучасних розподілених системах.

Хід роботи

У рамках цього завдання я підготував презентацію на тему "Архітектура Instagram", у якій детально розглянув, як побудована одна з наймасштабніших соціальних мереж світу, та які архітектурні патерни лежать в основі її роботи.
Я обрав цю тему, оскільки Instagram — це приклад сучасної розподіленої системи, яка щодня обслуговує мільярди користувачів і запитів, а її архітектурні рішення є актуальними для будь-яких великих ІТ-проєктів.
У презентації я розглянув такі аспекти:
1. Загальна інформація про Instagram 
o Коротко описав історію створення, основні функції та масштаби системи.
o Пояснив, чому архітектура Instagram є цікавим прикладом для вивчення.
2. Еволюція архітектури 
o Показав, як система еволюціонувала від монолітного додатку на Django до мікросервісної архітектури.
o Пояснив, які проблеми вирішувалися на кожному етапі розвитку.
3. Серверна архітектура 
o Детально розібрав, як організована серверна частина: розподіленість, використання хмарної інфраструктури, масштабування.
o Описав основні мікросервіси, їхню відповідальність та взаємодію.
o Навів приклади використання різних баз даних (PostgreSQL, Cassandra, Redis, S3) для різних типів даних.
4. Архітектурні патерни 
o Розглянув ключові патерни, які використовуються в Instagram: 
1. Подіє-орієнтована архітектура (Event-Driven Architecture): пояснив, як сервіси взаємодіють через події та черги повідомлень.
2. Патерн "Запобіжник" (Circuit Breaker) описав, як система захищає себе від збоїв окремих сервісів.
3. Виявлення сервісів (Service Discovery): пояснив, як сервіси знаходять один одного у динамічному середовищі.
4. Патерн "Кеш збоку" (Cache Aside): показав, як організовано кешування для підвищення швидкодії.
o Для кожного патерна навів коротке пояснення, приклад застосування та переваги.
5. Веб- та мобільна архітектура 
o Описав, як побудовані веб-інтерфейс та мобільні додатки Instagram, які технології використовуються (React, GraphQL, Swift, Kotlin).
o Пояснив, як клієнти взаємодіють із сервером, як забезпечується оптимізація та безпека.
6. Додаткові технології та безпека 
o Розглянув використання CDN, аналітики, машинного навчання для рекомендацій.
o Описав основні підходи до забезпечення безпеки: шифрування, аутентифікація, захист від атак.
7. Практичний приклад коду 
o Навів приклад коду для обробки подій через чергу RabbitMQ, що ілюструє подіє-орієнтований підхід.
o Пояснив, як цей код вписується у загальну архітектуру системи.





ВИСНОВКИ

У результаті виконання роботи я ознайомився з архітектурою Instagram, зрозумів, як великі системи організовують свою роботу для досягнення масштабованості, надійності та високої продуктивності.
Я розібрався з основними архітектурними патернами, які дозволяють ефективно будувати розподілені системи, та побачив їхнє практичне застосування на прикладі Instagram.
Презентація містить як теоретичні пояснення, так і практичні приклади, що допомагає краще зрозуміти, як ці підходи можна використовувати у власних проєктах.




















ДОДАТОК А

Відеозапис доповіді на YouTube: https://www.youtube.com/watch?v=AQ9jols1Eas

00:00 Архітектура Інстаграм. Вступ. 
00:30 Що таке Інстаграм? Інформація про Інстаграм та історію створення. 
1:11 Еволюція архітектури. Перехід від монолітної архітектури на Django до мікросервісної архітектура. 
1:55 Серверна архітектура: загальний огляд. Як працює розподілена система. 
2:33 Серверна архітектура: загальний огляд. Використані патерни проєктування: "Подіє-орієнтована архітектура", "Запобіжник", "Виявлення сервісів", "Обхідний кеш". 
4:24 Приклад: Обробка подій на Python. Приклад коду патерну "Обробка подій". 
4:41 Приклад: Кешування даних у Redis. Приклад коду "Кеш збоку" 
4:53 Серверна архітектура: технології та мікросервіси. Використані технології для побудови серверної архітектури. 
6:17 Веб-архітектура: загальний огляд. Огляд архітектури веб-додатку Інстаграм. 
6:48 Веб-архітектура: технології та оптимізація.Технології використані у Веб-архітектурі та для оптимізації.
7:36 Мобільна архітектура: загальний огляд. Нативні додатки, модульність та оптимізація. 
8:06 Мобільна архітектура: технології та особливості. Технології використані для мобільної архітектури та особливості застосування. 
8:47 Додаткові технології: загальний огляд. Додаткові технології використані у Інстаграм для покращення користувацького досвіду. 
9:21 Безпека в архітектурі Інстаграм. Використані технології для забезпечення безпеки. 
9:57 Висновки. Висновки щодо архітектури Інстаграму, а також висновок про еволюцію та необхідний розвиток архітектури програмного забезпечення.
ДОДАТОК Б



Рисунок Б.1 – Архітектура Інстаграм. Вступ.



Рисунок Б.2 – Що таке Інстаграм? Інформація про Інстаграм та історію створення.


Рисунок Б.3 – Еволюція архітектури. Перехід від монолітної архітектури на Django до мікросервісної архітектура.



Рисунок Б.4 – Серверна архітектура: загальний огляд. Як працює розподілена система. Використані патерни проєктування.


Рисунок Б.5 – Приклад: Обробка подій на Python. Приклад коду патерну "Обробка подій".



Рисунок Б.6 – Приклад: Кешування даних у Redis. Приклад патерну "Кеш збоку"


Рисунок Б.7 – Серверна архітектура: технології та мікросервіси. Використані технології для побудови серверної архітектури.


Рисунок Б.8 – Веб-архітектура: загальний огляд. Огляд архітектури веб-додатку Інстаграм.


Рисунок Б.9 – Веб-архітектура: технології та оптимізація.Технології використані у Веб-архітектурі та для оптимізації.



Рисунок Б.10 – Мобільна архітектура: загальний огляд. Нативні додатки, модульність та оптимізація.


Рисунок Б.11 – Мобільна архітектура: технології та особливості. Технології використані для мобільної архітектури та особливості застосування.



Рисунок Б.12 – Додаткові технології: загальний огляд. Додаткові технології використані у Інстаграм для покращення користувацького досвіду.


Рисунок Б.13 – Безпека в архітектурі Інстаграм. Використані технології для забезпечення безпеки.



Рисунок Б.14 – Висновки. Висновки щодо архітектури Інстаграму, а також висновок про еволюцію та необхідний розвиток архітектури програмного забезпечення.
ДОДАТОК В

Обробка подій на Python. Приклад подіє-орієнтована архітектури:
1  import pika 
2  import json 
3  
4  def process_new_photo(ch, method, properties, body): 
5 	 event = json.loads(body) 
6 	 photo_id = event['photo_id’] 
7 	 # Тут може бути логіка обробки зображення 
8 	 print(f"Обробляємо нове фото з ID: {photo_id}") 
9  
10  connection = pika.BlockingConnection(pika.ConnectionParameters('rabbitmq’)) 
11  channel = connection.channel() 
12  channel.queue_declare(queue='new_photos’) 
13  channel.basic_consume(queue='new_photos’, 
14			on_message_callback=process_new_photo, 
15 			auto_ack=True) 
16  print('Очікуємо нові фото...’) 
17  channel.start_consuming()

Кешування даних у Redis (Cache Aside Pattern). Приклад патерну «Кеш збоку»:
1  import redis 
2  
3  cache = redis.Redis(host='localhost', port=6379, db=0)
4  
5  def get_user_profile(user_id): 
6  	 profile = cache.get(f"user:{user_id}") 
7 	 if profile:
8 		 return profile # Повертаємо з кешу 
9 	 # Якщо в кеші немає — отримуємо з БД
10 	 profile = db_get_user_profile(user_id)
11 	 cache.set(f"user:{user_id}", profile, ex=3600) # Кладемо в кеш на годину
12 	 return profile 


2


